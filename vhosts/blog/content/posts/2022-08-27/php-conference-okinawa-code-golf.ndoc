---
[article]
uuid = "bb71bb5d-361b-44cb-9753-81d14583d860"
title = "PHP カンファレンス沖縄で出題されたコードゴルフの問題を解いてみた"
description = "PHP カンファレンス沖縄の懇親会 LT で出題されたコードゴルフの問題を解いてみた。"
tags = [
  "conference",
  "php",
  "phpconokinawa",
]

[[article.revisions]]
date = "2022-08-27"
remark = "公開"
---
<article>
  <section id="intro">
    <h>はじめに</h>
    <p>
      本日 <a href="https://phpcon.okinawa.jp/">PHP カンファレンス沖縄 2022</a> が開催された (らしい)。
    </p>
    <p>
      カンファレンスには参加できなかったものの、懇親会の LT で出題されたコードゴルフの問題が Twitter に流れてきたので、解いてみた。
    </p>
    <ul>
      <li>ツイート: https://twitter.com/m3m0r7/status/1563397620231712772</li>
      <li>スライド: https://speakerdeck.com/memory1994/php-conference-okinawa-2022-extra?slide=3</li>
    </ul>
  </section>
  <section id="solution">
    <h>解</h>
    <p>
      細かいレギュレーションは不明だったので、勝手に定めた。
    </p>
    <ul>
      <li>コマンドライン引数の第1引数で受けとる</li>
      <li>結果は標準出力に出す</li>
      <li>コンマの直後にはスペースを1つ置く</li>
      <li>末尾コンマは禁止</li>
      <li>数字でないものは入ってこないものとする</li>
      <li>負数は入ってこないものとする</li>
    </ul>
    <p>
      書いたものがこちら:
    </p>
    <codeblock language="php">
      <![CDATA[
      [<?php $n=$argv[1];foreach([1e4,5e3,2e3,1e3,500,100,50,10,5,1]as$x)for(;$n>=$x;$n-=$x)$r[]=$x;echo implode(', ',$r??[]);?>]
      ]]>
    </codeblock>
    <p>
      しめて 123 バイトとなった (末尾改行を含めずにカウント)。
    </p>
    <p>
      こちらは改行とスペースを追加したバージョン:
    </p>
    <codeblock language="php">
      <![CDATA[
      [<?php

      $n = $argv[1];
      foreach ([1e4, 5e3, 2e3, 1e3, 500, 100, 50, 10, 5, 1] as $x)
        for (; $n >= $x; $n -= $x)
          $r[] = $x;
      echo implode(', ', $r ?? []);

      ?>]
      ]]>
    </codeblock>
  </section>
  <section id="techniques">
    <h>使用したテクニック</h>
    <section id="exponential-notation">
      <h>指数表記</h>
      <p>
        割と多くの言語のゴルフで使えるテクニック。
        <code>e</code> を用いた指数表記で、大きな数を短く表す。
        このコードでは <code>10000</code>、<code>5000</code>、<code>2000</code>、<code>1000</code> を指数表記している。
      </p>
    </section>
    <section id="shorten-loop">
      <h>foreach や for の中身を1つの文に</h>
      <p>
        <code>foreach</code>、<code>for</code>、<code>if</code> などの後ろには、
        通常 <code>{</code> を続けて複数の文を連ねるが、中身の文を1つにしてしまえば、<code>{</code> と <code>}</code> を省略できる。
        C言語などでも使える。
      </p>
    </section>
    <section id="omit-initialization">
      <h>$r に初期値を入れない</h>
      <p>
        PHP では、<code>$r[] = ......</code> のような配列の末尾に追加する式を実行したとき、
        <code>$r</code> が未定義だった場合は <code>$r</code> を勝手に定義して空の配列で初期化してくれる。
        これを利用すると、<code>$r = [];</code> のような初期化が不要になる。
      </p>
      <p>
        ただし、プログラムに 0 が渡されるとループを一度も回らないので、<code>$r</code> が未定義になってしまい、
        <code>implode()</code> に渡すところでエラーになる。
        それを防ぐために <code>$r ?? []</code> を使っている。
      </p>
      <p>
        もし 0 が渡されたケースを無視するなら、これが不要になるので 4 バイト縮む。
      </p>
    </section>
    <section id="put-text-outside-php-tag">
      <h>PHP タグの外に文字列を置く</h>
      <p>
        PHP では、<code>&lt;?php</code> <code>?&gt;</code> で囲われた部分の外側にある文字列は、そのまま出力される。
        今回のケースでは、先頭と末尾に必ず <code>[</code> と <code>]</code> を出力するので、そのまま書いてやればよい。
      </p>
    </section>
  </section>
  <section id="outro">
    <h>おわりに</h>
    <p>
      最後になりましたが、<a href="https://twitter.com/m3m0r7">めもりー</a>さん、楽しい問題をありがとうございました。
    </p>
  </section>
</article>
