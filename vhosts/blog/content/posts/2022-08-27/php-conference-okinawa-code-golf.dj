---
[article]
uuid = "bb71bb5d-361b-44cb-9753-81d14583d860"
title = "PHP カンファレンス沖縄で出題されたコードゴルフの問題を解いてみた"
description = "PHP カンファレンス沖縄の懇親会 LT で出題されたコードゴルフの問題を解いてみた。"
tags = [
  "conference",
  "php",
  "phpconokinawa",
]

[[article.revisions]]
date = "2022-08-27"
remark = "公開"
---
{#intro}
# はじめに

本日 [PHP カンファレンス沖縄 2022](https://phpcon.okinawa.jp/) が開催された (らしい)。

カンファレンスには参加できなかったものの、懇親会の LT で出題されたコードゴルフの問題が Twitter に流れてきたので、解いてみた。

* ツイート: https://twitter.com/m3m0r7/status/1563397620231712772
* スライド: https://speakerdeck.com/memory1994/php-conference-okinawa-2022-extra?slide=3

{#solution}
# 解

細かいレギュレーションは不明だったので、勝手に定めた。

* コマンドライン引数の第1引数で受けとる
* 結果は標準出力に出す
* コンマの直後にはスペースを1つ置く
* 末尾コンマは禁止
* 数字でないものは入ってこないものとする
* 負数は入ってこないものとする

書いたものがこちら:

```php
[<?php $n=$argv[1];foreach([1e4,5e3,2e3,1e3,500,100,50,10,5,1]as$x)for(;$n>=$x;$n-=$x)$r[]=$x;echo implode(', ',$r??[]);?>]
```

しめて 123 バイトとなった (末尾改行を含めずにカウント)。

こちらは改行とスペースを追加したバージョン:

```php
[<?php

$n = $argv[1];
foreach ([1e4, 5e3, 2e3, 1e3, 500, 100, 50, 10, 5, 1] as $x)
  for (; $n >= $x; $n -= $x)
    $r[] = $x;
echo implode(', ', $r ?? []);

?>]
```

{#techniques}
# 使用したテクニック

{#exponential-notation}
## 指数表記

割と多くの言語のゴルフで使えるテクニック。
`e` を用いた指数表記で、大きな数を短く表す。
このコードでは `10000`、`5000`、`2000`、`1000` を指数表記している。

{#shorten-loop}
## foreach や for の中身を1つの文に

`foreach`、`for`、`if` などの後ろには、
通常 `{` を続けて複数の文を連ねるが、中身の文を1つにしてしまえば、`{` と `}` を省略できる。
C言語などでも使える。

{#omit-initialization}
## $r に初期値を入れない

PHP では、`$r[] = ......` のような配列の末尾に追加する式を実行したとき、
`$r` が未定義だった場合は `$r` を勝手に定義して空の配列で初期化してくれる。
これを利用すると、`$r = [];` のような初期化が不要になる。

ただし、プログラムに 0 が渡されるとループを一度も回らないので、`$r` が未定義になってしまい、
`implode()` に渡すところでエラーになる。
それを防ぐために `$r ?? []` を使っている。

もし 0 が渡されたケースを無視するなら、これが不要になるので 4 バイト縮む。

{#put-text-outside-php-tag}
## PHP タグの外に文字列を置く

PHP では、`&lt;?php` `?&gt;` で囲われた部分の外側にある文字列は、そのまま出力される。
今回のケースでは、先頭と末尾に必ず `[` と `]` を出力するので、そのまま書いてやればよい。

{#outro}
# おわりに

最後になりましたが、 [めもりー](https://twitter.com/m3m0r7) さん、楽しい問題をありがとうございました。
