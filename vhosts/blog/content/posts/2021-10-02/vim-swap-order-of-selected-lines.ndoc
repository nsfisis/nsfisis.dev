---
[article]
uuid = "665de47e-0ed6-405e-ad30-81c3c4592d45"
title = "Vimで選択した行の順番を入れ替える"
description = "Vim で選択した行の順番を入れ替える方法。"
tags = [
  "vim",
]

[[article.revisions]]
date = "2021-10-02"
remark = "Qiita から移植"
---
<article>
  <note>
    この記事は Qiita から移植してきたものです。
    元 URL: <a href="https://qiita.com/nsfisis/items/4fefb361d9a693803520">https://qiita.com/nsfisis/items/4fefb361d9a693803520</a>
  </note>
  <section id="tl-dr">
    <h>TL; DR</h>
    <codeblock language="vim">
      <![CDATA[
      " License: Public Domain

      command! -bar -range=%
          \ Reverse
          \ keeppatterns <line1>,<line2>g/^/m<line1>-1
      ]]>
    </codeblock>
  </section>
  <section id="version">
    <h>バージョン情報</h>
    <p>
      <code>:version</code> の一部
    </p>
    <blockquote>
      <p>
        VIM - Vi IMproved 8.2 (2019 Dec 12, compiled Jan 26 2020 11:30:30) macOS
        version Included patches: 1-148 Huge version without GUI.
      </p>
    </blockquote>
  </section>
  <section id="existing-solution">
    <h>よく紹介されている手法</h>
    <section id="existing-solution--external-commands">
      <h><code>tac</code> / <code>tail</code></h>
      <p>
        <code>tac</code> や <code>tail -r</code> などの外部コマンドを <code>!</code>
        を使って呼び出し、置き換える。
      </p>
      <blockquote>
        <p>
          :h v_!
        </p>
      </blockquote>
      <p>
        <code>tac</code> コマンドや <code>tail</code> の <code>-r</code>
        オプションは環境によって利用できないことがあり、複数の環境を行き来する場合に採用しづらい
      </p>
    </section>
    <section id="existing-solution--global-command">
      <h><code>:g/^/m0</code></h>
      <p>
        こちらは外部コマンドに頼らず、Vim の機能のみを使う。<code>g</code> は <code>:global</code>
        コマンドの、<code>m</code> は <code>:move</code> コマンドの略
      </p>
      <p>
        <code>:global</code> コマンドは <code>:[range]global/{pattern}/[command]</code>
        のように使い、<code>[range]</code> で指定された範囲の行のうち、<code>{pattern}</code>
        で指定された検索パターンにマッチする行に対して、順番に <code>[command]</code>
        で指定された Ex コマンドを呼び出す。
      </p>
      <blockquote>
        <p>
          :h :global
        </p>
      </blockquote>
      <p>
        <code>:move</code> コマンドは <code>[range]:move {address}</code> のように使い、<code>[range]</code>
        で指定された範囲の行を <code>{address}</code> で指定された位置に移動させる。
      </p>
      <blockquote>
        <p>
          :h :move
        </p>
      </blockquote>
      <p>
        <code>:g/^/m0</code> のように組み合わせると、「すべての行を1行ずつ
        0行目(1行目の上)に動かす」という動きをする。これは確かに行の入れ替えになっている。
      </p>
      <p>
        なお、<code>:g/^/m0</code> は全ての行を入れ替えるが、<code>:N,Mg/^/mN-1</code> とすることで
        N行目から
        M行目を処理範囲とするよう拡張できる。手でこれを入力するわけにはいかないので、次のようなコマンドを用意する。
      </p>
      <codeblock language="vim">
        <![CDATA[
        command! -bar -range=%
            \ Reverse
            \ <line1>,<line2>g/^/m<line1>-1
        ]]>
      </codeblock>
      <p>
        これは望みの動作をするが、実際に実行してみると全行がハイライトされてしまう。次節で詳細を述べる。
      </p>
    </section>
  </section>
  <section id="problem-of-global-command">
    <h><code>:g/^/m0</code> の問題点</h>
    <p>
      <code>:global</code>
      コマンドは各行に対してマッチングを行う際、現在の検索パターンを上書きしてしまう。<code>^</code>
      は行の先頭にマッチするため、結果として全ての行がハイライトされてしまう。<code>'hlsearch'</code>
      オプションを無効にしている場合その限りではないが、その場合でも直前の検索パターンが失われてしまうと
      <code>n</code> コマンドなどの際に不便である。
    </p>
    <blockquote>
      <p>
        :h @/
      </p>
    </blockquote>
  </section>
  <section id="solution">
    <h>解決策</h>
    <blockquote>
      <p>
        [2020/9/28追記] より簡潔な方法を見つけたので次節に追記した
      </p>
    </blockquote>
    <p>
      前述した <code>:Reverse</code> コマンドの定義を少し変えて、次のようにする:
    </p>
    <codeblock language="vim">
      <![CDATA[
      function! s:reverse_lines(from, to) abort
          execute printf("%d,%dg/^/m%d", a:from, a:to, a:from - 1)
      endfunction

      command! -bar -range=%
          \ Reverse
          \ call <SID>reverse_lines(<line1>, <line2>)
      ]]>
    </codeblock>
    <p>
      実行しているコマンドが変わったわけではないが、関数呼び出しを経由するようにした。これだけで前述の問題が解決する。
    </p>
    <p>
      この理由は、ユーザー定義関数を実行する際は検索パターンが一度保存され、実行が終了したあと復元されるため。結果として検索パターンが
      <code>^</code> で上書きされることがなくなる。
    </p>
    <p>
      Vim のヘルプから該当箇所を引用する (強調は筆者による)。
    </p>
    <blockquote>
      <p>
        :h autocmd-searchpat
      </p>
      <p>
        <strong>Autocommands do not change the current search patterns.</strong> Vim saves the
        current search patterns before executing autocommands then restores them
        after the autocommands finish. This means that autocommands do not
        affect the strings highlighted with the `hlsearch' option.
      </p>
    </blockquote>
    <p>
      これは autocommand
      の実行に関しての記述だが、これと同じことがユーザー定義関数の実行時にも適用される。このことは
      <code>:nohlsearch</code> のヘルプにある。同じく該当箇所を引用する
      (強調は筆者による)。
    </p>
    <blockquote>
      <p>
        :h :nohlsearch
      </p>
      <p>
        (略) This command doesn’t work in an autocommand, because the
        highlighting state is saved and restored when executing autocommands
        |autocmd-searchpat|. <strong>Same thing for when invoking a user function.</strong>
      </p>
    </blockquote>
    <p>
      この仕様により、<code>:g/^/m0</code>
      の呼び出しをユーザー定義関数に切り出すことで上述の問題を解決できる。
    </p>
  </section>
  <section id="solution-revised">
    <h>解決策 (改訂版)</h>
    <blockquote>
      <p>
        [2020/9/28追記] より簡潔な方法を見つけたため追記する
      </p>
    </blockquote>
    <codeblock language="vim">
      <![CDATA[
      command! -bar -range=%
          \ Reverse
          \ keeppatterns <line1>,<line2>g/^/m<line1>-1
      ]]>
    </codeblock>
    <p>
      まさにこのための Exコマンド、<code>:keeppatterns</code>
      が存在する。<code>:keeppatterns {command}</code>
      のように使い、読んで字の如く、後ろに続く
      Exコマンドを「現在の検索パターンを保ったまま」実行する。はるかに分かりやすく意図を表現できる。
    </p>
    <blockquote>
      <p>
        :h :keeppatterns
      </p>
    </blockquote>
  </section>
</article>
