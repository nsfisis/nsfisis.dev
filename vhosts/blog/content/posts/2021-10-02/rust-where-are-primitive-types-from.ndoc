---
[article]
title = "Rust のプリミティブ型はどこからやって来るか"
description = "Rust のプリミティブ型は予約語ではなく普通の識別子である。どのようにこれが名前解決されるのかを調べた。"
tags = [
  "rust",
]

[[article.revisions]]
date = "2021-10-02"
remark = "Qiita から移植"
---
<article>
  <note>
    この記事は Qiita から移植してきたものです。
    元 URL: <a href="https://qiita.com/nsfisis/items/9a429432258bbcd6c565">https://qiita.com/nsfisis/items/9a429432258bbcd6c565</a>
  </note>
  <section id="intro">
    <h>前置き</h>
    <p>
      Rust
      において、プリミティブ型の名前は予約語でない。したがって、次のコードは合法である。
    </p>
    <codeblock language="rust">
      <![CDATA[
      #![allow(non_camel_case_types)]
      #![allow(dead_code)]

      struct bool;
      struct char;
      struct i8;
      struct i16;
      struct i32;
      struct i64;
      struct i128;
      struct isize;
      struct u8;
      struct u16;
      struct u32;
      struct u64;
      struct u128;
      struct usize;
      struct f32;
      struct f64;
      struct str;
      ]]>
    </codeblock>
    <p>
      では、普段単に <code>bool</code> と書いたとき、この <code>bool</code>
      は一体どこから来ているのか。rustc のソースを追ってみた。
    </p>
    <blockquote>
      <p>
        前提知識: 一般的なコンパイラの構造、用語。<code>rustc</code> そのものの知識は不要
        (というよりも筆者自身がよく知らない)
      </p>
    </blockquote>
  </section>
  <section id="code-reading">
    <h>調査</h>
    <p>
      調査に使用したソース (調査時点での最新 master)
    </p>
    <p>
      <a href="https://github.com/rust-lang/rust/tree/511ed9f2356af365ad8affe046b3dd33f7ac3c98">https://github.com/rust-lang/rust/tree/511ed9f2356af365ad8affe046b3dd33f7ac3c98</a>
    </p>
    <p>
      どのようにして調べるか。rustc
      の構造には詳しくないため、すぐに当たりをつけるのは難しい。
    </p>
    <p>
      大雑把な構造としては、<code>compiler</code> フォルダ以下に <code>rustc_*</code>
      という名前のクレートが数十個入っている。これがどうやら <code>rustc</code>
      コマンドの実装部のようだ。
    </p>
    <p>
      <code>rustc</code> はセルフホストされている (= <code>rustc</code> 自身が Rust で書かれている)
      ので、<code>bool</code> や <code>char</code>
      などで適当に検索をかけてもノイズが多すぎて話にならない。
      しかし、お誂え向きなことに <code>i128</code>/<code>u128</code>
      というコンパイラ自身が使うことがなさそうな型が存在するのでこれを使って
      <code>git grep</code> してみる。
    </p>
    <codeblock>
      <![CDATA[
      $ git grep "\bi128\b" | wc      # i128
      165    1069   15790

      $ git grep "\bu128\b" | wc      # u128
      293    2127   26667

      $ git grep "\bbool\b" | wc      # cf. bool の結果
      3563   23577  294659
      ]]>
    </codeblock>
    <p>
      165
      程度であれば探すことができそうだ。今回は、クレート名を見ておおよその当たりをつけた。
    </p>
    <codeblock>
      <![CDATA[
      $ git grep "\bi128\b"
      ...
      rustc_resolve/src/lib.rs:        table.insert(sym::i128, Int(IntTy::I128));
      ...
      ]]>
    </codeblock>
    <p>
      <code>rustc_resolve</code>
      というのはいかにも名前解決を担いそうなクレート名である。該当箇所を見てみる。
    </p>
    <codeblock language="rust">
      <![CDATA[
      /// Interns the names of the primitive types.
      ///
      /// All other types are defined somewhere and possibly imported, but the primitive ones need
      /// special handling, since they have no place of origin.
      struct PrimitiveTypeTable {
          primitive_types: FxHashMap<Symbol, PrimTy>,
      }

      impl PrimitiveTypeTable {
          fn new() -> PrimitiveTypeTable {
              let mut table = FxHashMap::default();

              table.insert(sym::bool, Bool);
              table.insert(sym::char, Char);
              table.insert(sym::f32, Float(FloatTy::F32));
              table.insert(sym::f64, Float(FloatTy::F64));
              table.insert(sym::isize, Int(IntTy::Isize));
              table.insert(sym::i8, Int(IntTy::I8));
              table.insert(sym::i16, Int(IntTy::I16));
              table.insert(sym::i32, Int(IntTy::I32));
              table.insert(sym::i64, Int(IntTy::I64));
              table.insert(sym::i128, Int(IntTy::I128));
              table.insert(sym::str, Str);
              table.insert(sym::usize, Uint(UintTy::Usize));
              table.insert(sym::u8, Uint(UintTy::U8));
              table.insert(sym::u16, Uint(UintTy::U16));
              table.insert(sym::u32, Uint(UintTy::U32));
              table.insert(sym::u64, Uint(UintTy::U64));
              table.insert(sym::u128, Uint(UintTy::U128));
              Self { primitive_types: table }
          }
      }
      ]]>
    </codeblock>
    <p>
      これは初めに列挙したプリミティブ型の一覧と一致している。doc comment
      にも、
    </p>
    <blockquote>
      <p>
        All other types are defined somewhere and possibly imported, but the
        primitive ones need special handling, since they have no place of
        origin.
      </p>
    </blockquote>
    <p>
      とある。次はこの struct
      の使用箇所を追う。追うと言っても使われている箇所は次の一箇所しかない。なお説明に不要な箇所は大きく削っている。
    </p>
    <codeblock language="rust">
      <![CDATA[
      /// This resolves the identifier `ident` in the namespace `ns` in the current lexical scope.
      /// (略)
      fn resolve_ident_in_lexical_scope(
          &mut self,
          mut ident: Ident,
          ns: Namespace,
          // (略)
      ) -> Option<LexicalScopeBinding<'a>> {
          // (略)

          if ns == TypeNS {
              if let Some(prim_ty) = self.primitive_type_table.primitive_types.get(&ident.name) {
                  let binding =
                      (Res::PrimTy(*prim_ty), ty::Visibility::Public, DUMMY_SP, ExpnId::root())
                        .to_name_binding(self.arenas);
                  return Some(LexicalScopeBinding::Item(binding));
              }
          }

          None
      }
      ]]>
    </codeblock>
    <p>
      関数名や doc comment が示している通り、この関数は識別子 (identifier,
      ident) を現在のレキシカルスコープ内で解決 (resolve) する。
      <code>if ns == TypeNS</code> のブロック内では、<code>primitive_type_table</code> (上記の
      <code>PrimitiveTypeTable::new()</code> で作られた変数) に含まれている識別子
      (<code>bool</code>、<code>i32</code> など)
      かどうか判定し、そうであればそれに紐づけられたプリミティブ型を返している。
    </p>
    <p>
      なお、<code>ns</code> は「名前空間」を示す変数である。Rust
      における名前空間はC言語におけるそれとほとんど同じで、今探している名前が関数名/変数名なのか型なのかマクロなのかを区別している。この
      <code>if</code>
      は、プリミティブ型に解決されるのは型を探しているときだけだ、と言っている。
    </p>
    <p>
      重要なのは、これが <code>resolve_ident_in_lexical_scope()</code>
      の最後に書かれている点である。つまり、最初に挙げたプリミティブ型の識別子は、「名前解決の最終段階で」、「他に同名の型が見つかっていなければ」プリミティブ型として解決される。
    </p>
    <p>
      動作がわかったところで、例として次のコードを考える。
    </p>
    <codeblock language="rust">
      <![CDATA[
      #![allow(non_camel_case_types)]

      struct bool;

      fn main() {
          let _: bool = bool;
      }
      ]]>
    </codeblock>
    <p>
      ここで <code>main()</code> の <code>bool</code> は <code>struct bool</code>
      として解決される。なぜなら、プリミティブ型の判定をする前に <code>bool</code>
      という名前の別の型が見つかるからだ。
    </p>
  </section>
  <section id="outro">
    <h>まとめ</h>
    <p>
      Rust
      のプリミティブ型は予約語ではない。名前解決の最終段階で特別扱いされ、他に同名の型が見つかっていなければ対応するプリミティブ型に解決される。
    </p>
  </section>
</article>
