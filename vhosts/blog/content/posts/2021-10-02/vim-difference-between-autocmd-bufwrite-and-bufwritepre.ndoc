---
[article]
title = "【Vim】 autocmd events の BufWrite/BufWritePre の違い"
description = "Vim の autocmd events における BufWrite/BufWritePre がどう違うのかを調べた結果、違いはないことがわかった。"
tags = [
  "vim",
]

[[article.revisions]]
date = "2021-10-02"
remark = "Qiita から移植"
---
<article>
  <note>
    この記事は Qiita から移植してきたものです。
    元 URL: <a href="https://qiita.com/nsfisis/items/79ab4db8564032de0b25">https://qiita.com/nsfisis/items/79ab4db8564032de0b25</a>
  </note>
  <section id="tl-dr">
    <h>TL; DR</h>
    <p>
      違いはない。ただのエイリアス。
    </p>
  </section>
  <section id="code-reading">
    <h>調査記録</h>
    <p>
      Vim の autocmd events には似通った名前のものがいくつかある。大抵は
      <code>:help</code>
      に説明があるが、この記事のタイトルにある2つを含めた以下のイベントには、その違いについて説明がない。
    </p>
    <ul>
      <li><code>BufRead</code>/<code>BufReadPost</code></li>
      <li><code>BufWrite</code>/<code>BufWritePre</code></li>
      <li><code>BufAdd</code>/<code>BufCreate</code></li>
    </ul>
    <p>
      このうち、<code>BufAdd</code>/<code>BufCreate</code> に関しては、<code>:help BufCreate</code> に
    </p>
    <blockquote>
      <p>
        The BufCreate event is for historic reasons.
      </p>
    </blockquote>
    <p>
      とあり、おそらくは <code>BufAdd</code>
      のエイリアスであろうということがわかる。他の2組も同様ではないかと予想されるが、確認のため
      vim と neovim のソースコードを調査した。
    </p>
    <blockquote>
      <p>
        ソースコードへのリンク
        <a href="https://github.com/vim/vim/tree/8e6be34338f13a6a625f19bcef82019c9adc65f2">vim (調査時点での master branch)</a>
        <a href="https://github.com/neovim/neovim/tree/71d4f5851f068eeb432af34850dddda8cc1c71e3">neovim (上に同じ)</a>
      </p>
    </blockquote>
    <section id="code-reading--vim">
      <h>vim のソースコード</h>
      <p>
        以下は、autocmd events
        の名前と内部で使われている整数値とのマッピングを定義している箇所である。見ての通り、上でエイリアスではないかと述べた3組には、それぞれ同じ内部値が使われている。
      </p>
      <p>
        <a href="https://github.com/vim/vim/blob/8e6be34338f13a6a625f19bcef82019c9adc65f2/src/autocmd.c#L85-L86">https://github.com/vim/vim/blob/8e6be34338f13a6a625f19bcef82019c9adc65f2/src/autocmd.c#L85-L86</a>
      </p>
      <codeblock language="c">
        <![CDATA[
        {"BufAdd",      EVENT_BUFADD},
        {"BufCreate",   EVENT_BUFADD},
        ]]>
      </codeblock>
      <p>
        <a href="https://github.com/vim/vim/blob/8e6be34338f13a6a625f19bcef82019c9adc65f2/src/autocmd.c#L95-L97">https://github.com/vim/vim/blob/8e6be34338f13a6a625f19bcef82019c9adc65f2/src/autocmd.c#L95-L97</a>
      </p>
      <codeblock language="c">
        <![CDATA[
        {"BufRead",     EVENT_BUFREADPOST},
        {"BufReadCmd",  EVENT_BUFREADCMD},
        {"BufReadPost", EVENT_BUFREADPOST},
        ]]>
      </codeblock>
      <p>
        <a href="https://github.com/vim/vim/blob/8e6be34338f13a6a625f19bcef82019c9adc65f2/src/autocmd.c#L103-L105">https://github.com/vim/vim/blob/8e6be34338f13a6a625f19bcef82019c9adc65f2/src/autocmd.c#L103-L105</a>
      </p>
      <codeblock language="c">
        <![CDATA[
        {"BufWrite",    EVENT_BUFWRITEPRE},
        {"BufWritePost",    EVENT_BUFWRITEPOST},
        {"BufWritePre", EVENT_BUFWRITEPRE},
        ]]>
      </codeblock>
    </section>
    <section id="code-reading--neovim">
      <h>neovim のソースコード</h>
      <p>
        neovim の場合でも同様のマッピングが定義されているが、こちらの場合は Lua
        で書かれている。以下にある通り、はっきり <code>aliases</code> と書かれている。
      </p>
      <p>
        <a href="https://github.com/neovim/neovim/blob/71d4f5851f068eeb432af34850dddda8cc1c71e3/src/nvim/auevents.lua#L119-L124">https://github.com/neovim/neovim/blob/71d4f5851f068eeb432af34850dddda8cc1c71e3/src/nvim/auevents.lua#L119-L124</a>
      </p>
      <codeblock language="lua">
        <![CDATA[
        aliases = {
        BufCreate = 'BufAdd',
        BufRead = 'BufReadPost',
        BufWrite = 'BufWritePre',
        FileEncoding = 'EncodingChanged',
        },
        ]]>
      </codeblock>
      <p>
        ところで、上では取り上げなかった <code>FileEncoding</code> だが、これは
        <code>:help FileEncoding</code> にしっかりと書いてある。
      </p>
      <codeblock>
        <![CDATA[
                                                                      *FileEncoding*
        FileEncoding                    Obsolete.  It still works and is equivalent
                                        to |EncodingChanged|.
        ]]>
      </codeblock>
    </section>
  </section>
  <section id="outro">
    <h>まとめ</h>
    <p>
      記事タイトルについて言えば、どちらも変わらないので好きな方を使えばよい。あえて言えば、次のようになるだろう。
    </p>
    <ul>
      <li>
        <code>BufAdd</code>/<code>BufCreate</code>
        <ul>
          <li>→ <code>BufCreate</code> は歴史的な理由により ("for historic reasons") 存在しているため、新しい方 (<code>BufAdd</code>) を使う</li>
        </ul>
      </li>
      <li>
        <code>BufRead</code>/<code>BufReadPost</code>
        <ul>
          <li>→ <code>BufReadPre</code> との対称性のため、あるいは <code>BufWritePost</code> との対称性のため <code>BufReadPost</code> を使う</li>
        </ul>
      </li>
      <li>
        <code>BufWrite</code>/<code>BufWritePre</code>
        <ul>
          <li>→ <code>BufWritePost</code> との対称性のため、あるいは <code>BufReadPre</code> との対称性のため <code>BufWritePre</code> を使う</li>
        </ul>
      </li>
      <li>
        <code>FileEncoding</code>/<code>EncodingChanged</code>
        <ul>
          <li>→ <code>FileEncoding</code> は <code>`Obsolete'' と明言されているので、`EncodingChanged</code> を使う</li>
        </ul>
      </li>
    </ul>
    <p>
      ところでこの調査で知ったのだが、<code>BufRead</code> と <code>BufWrite</code>
      は上にある通り発火するタイミングが「後」と「前」で対称性がない。可能なら
      <code>Pre</code>/<code>Post</code> 付きのものを使った方が分かりやすいだろう。
    </p>
  </section>
</article>
