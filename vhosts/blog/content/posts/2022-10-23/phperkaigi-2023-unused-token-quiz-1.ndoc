---
[article]
uuid = "46e0d5db-b17e-464c-a723-8c3e01af7d1d"
title = "PHPerKaigi 2023: ボツになったトークン問題 その 1"
description = "来年の PHPerKaigi 2023 でデジタルサーカス株式会社から出題予定のトークン問題のうち、ボツになった問題を公開する (その 1)。"
tags = [
  "php",
  "phperkaigi",
]

[[article.revisions]]
date = "2022-10-23"
remark = "公開"
---
<article>
  <section id="intro">
    <h>はじめに</h>
    <p>
      2023 年 3 月 23 日から 25 日にかけて開催予定 (記事執筆時点) の、
      <a href="https://phperkaigi.jp/2023/">PHPerKaigi 2023</a> において、
      昨年と同様に、弊社 <a href="https://www.dgcircus.com/">デジタルサーカス株式会社</a> から、
      トークン問題を出題予定である。
    </p>
    <p>
      昨年のトークン問題の記事はこちら: <a href="/posts/2022-04-09/phperkaigi-2022-tokens">PHPerKaigi 2022 トークン問題の解説</a>
    </p>
    <p>
      すでに 2023 年用の問題は作成済みであるが、その制作過程の中でいくつかボツ問ができた。
      せっかくなので、PHPerKaigi 開催を待つ間に紹介しようと思う。
    </p>
    <p>
      10 月から 2 月まで、毎月 1 記事ずつ公開していく予定 (忘れていなければ)。
    </p>
  </section>
  <section id="quiz">
    <h>問題</h>
    <p>
      注意: これはボツ問なので、得られたトークンを PHPerKaigi で入力してもポイントにはならない。
    </p>
    <codeblock language="php">
      <![CDATA[
      <?php

      $π = $argv[1] ?? null;
      if ($π === null) {
        exit('No input.');
      }
      $π = trim($π);
      if (!is_numeric($π)) {
        exit('Invalid input.');
      }

      $s = implode(array_map(chr(...), str_split($π, 2)));

      preg_match('/(\x23.+?) /', $s, $m);
      $t = $m[1] ?? '';

      if (md5($t) === '056e831a4146bf123e8ea16613303d2e') {
        echo "Token: {$t}\n";
      } else {
        echo "Failed.\n";
      }
      ]]>
    </codeblock>
  </section>
  <section id="how-to-obtain-token">
    <h>トークン入手方法</h>
    <p>
      ソースを見るとわかるとおり、<code>$argv[1]</code> を参照している。
      それを <code>$π</code> なる変数に代入しているので、円周率を渡してみる。
    </p>
    <codeblock language="shell-session">
      <![CDATA[
      $ php Q.php 3.14
      Failed.
      ]]>
    </codeblock>
    <p>
      失敗してしまった。精度を上げてみる。
    </p>
    <codeblock language="shell-session">
      <![CDATA[
      $ php Q.php 3.1415
      Failed.
      ]]>
    </codeblock>
    <p>
      だめだった。これを成功するまで繰り返す。
    </p>
    <p>
      最初にトークンが得られるのは、小数点以下 16 桁目まで入力したときで、こうなる。
    </p>
    <codeblock language="shell-session">
      <![CDATA[
      $ php Q.php 3.1415926535897932
      Token: #YO
      ]]>
    </codeblock>
    <p>
      めでたくトークン「<code>#YO</code>」が手に入った。
    </p>
  </section>
  <section id="commentary">
    <h>解説</h>
    <p>
      短いので頭から追っていく。
    </p>
    <codeblock language="php">
      <![CDATA[
      $π = $argv[1] ?? null;
      if ($π === null) {
        exit('No input.');
      }
      $π = trim($π);
      if (!is_numeric($π)) {
        exit('Invalid input.');
      }
      ]]>
    </codeblock>
    <p>
      入力のバリデーション部分。数値のみ受け付ける。
    </p>
    <codeblock language="php">
      <![CDATA[
      $s = implode(array_map(chr(...), str_split($π, 2)));
      ]]>
    </codeblock>
    <p>
      <code>$π</code> を 2 文字ごとに区切り (<code>str_split</code>)、
      数値を ASCII コードと見做して文字に変換 (<code>chr</code>) して結合 (<code>implode</code>) している。
    </p>
    <p>
      例えば、<code>$π</code> が <code>'656667'</code> だったとすると、
      <code>65</code>、<code>66</code>、<code>67</code> に対応した
      <code>'A'</code>、<code>'B'</code>、<code>'C'</code> へと変換され、<code>'ABC'</code> になる。
    </p>
    <codeblock language="php">
      <![CDATA[
      $π = '656667';
      $s = implode(array_map(chr(...), str_split($π, 2)));
      echo $s;
      // => ABC
      ]]>
    </codeblock>
    <codeblock language="php">
      <![CDATA[
      preg_match('/(\x23.+?) /', $s, $m);
      $t = $m[1] ?? '';
      ]]>
    </codeblock>
    <p>
      正規表現でマッチングしている。<code>\x23</code> は <code>#</code> と同じであることに留意すると、
      この正規表現は「<code>#</code> から始まる 2 以上の長さ (含 <code>#</code>) の文字列で、
      最初に現れるスペースまで」にマッチする。つまりこれは、PHPerKaigi におけるトークンである。
    </p>
    <p>
      なお、<code>#</code> を直接書いていないのは、<code>/#.+?) /</code> と書くと、
      <code>#.+?)</code> という意図せぬトークンが登録されてしまうからである。
    </p>
    <codeblock language="php">
      <![CDATA[
      if (md5($t) === '056e831a4146bf123e8ea16613303d2e') {
        echo "Token: {$t}\n";
      } else {
        echo "Failed.\n";
      }
      ]]>
    </codeblock>
    <p>
      最後にトークンのハッシュ値を見て、想定解かどうかを確認する。
    </p>
  </section>
  <section id="outro">
    <h>おわりに</h>
    <p>
      円周率を何桁も計算して ASCII コード経由で文字列化すれば、トークンっぽいものがどこかで出てくるのではないか、と考えて生まれた作品。
    </p>
    <p>
      最初は真面目に円周率の計算プログラムを組んでいたのだが、いざ動かしてみるとやけに浅いところにあったので驚いた
      (ちなみに、それでも <code>M_PI</code> や <code>pi()</code> では精度が足りない)。
      見つけたときは狂喜したものの、冷静になってみると大して面白くなかったのでボツになった。
      むしろ、100 万桁目くらいに埋まっていてくれたほうがよかったかもしれない。
    </p>
  </section>
</article>
