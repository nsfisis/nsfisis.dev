---
[article]
uuid = "89722cfb-7f4b-4e96-80bc-e0096e5eeef6"
title = "PHPerKaigi 2023: ボツになったトークン問題 その 3"
description = "来年の PHPerKaigi 2023 でデジタルサーカス株式会社から出題予定のトークン問題のうち、ボツになった問題を公開する (その 3)。"
tags = [
  "php",
  "phperkaigi",
]

[[article.revisions]]
date = "2023-01-10"
remark = "公開"
---
<article>
  <section id="intro">
    <h>はじめに</h>
    <p>
      2023 年 3 月 23 日から 25 日にかけて開催予定 (記事執筆時点) の <a href="https://phperkaigi.jp/2023/">PHPerKaigi 2023</a> において、
      昨年と同様に、弊社 <a href="https://www.dgcircus.com/">デジタルサーカス株式会社</a> からトークン問題を出題予定である。
    </p>
    <p>
      昨年のトークン問題の記事はこちら: <a href="/posts/2022-04-09/phperkaigi-2022-tokens/">PHPerKaigi 2022 トークン問題の解説</a>
    </p>
    <p>
      すでに 2023 年用の問題は作成済みであるが、その制作過程の中でいくつかボツ問ができた。
      せっかくなので、PHPerKaigi 開催を待つ間に紹介しようと思う。
    </p>
    <p>
      10 月から 2 月まで、毎月 1 記事ずつ公開していく予定 (忘れていなければ → 忘れていたので 12 月公開予定だった記事を今書いている)。
    </p>
    <ul>
      <li>その 1 はこちら: <a href="/posts/2022-10-23/phperkaigi-2023-unused-token-quiz-1/">PHPerKaigi 2023: ボツになったトークン問題 その 1</a></li>
      <li>その 2 はこちら: <a href="/posts/2022-11-19/phperkaigi-2023-unused-token-quiz-2/">PHPerKaigi 2023: ボツになったトークン問題 その 2</a></li>
    </ul>
  </section>
  <section id="quiz">
    <h>問題</h>
    <p>
      注意: これはボツ問なので、得られたトークンを PHPerKaigi で入力してもポイントにはならない。
    </p>
    <codeblock language="php">
      <![CDATA[
      <?php
      try {
        f(g() / __LINE__);
      } catch (Throwable $e) {
        while ($e = $e->getPrevious()) printf('%c', $e->getLine() + 23);
        echo "\n";
      }
      function f(int $i) {
        if ($i < 0) f();
        try {
          match ($i) {
            0 => 0 / 0,



            15, 36 => 0 / 0,
            14 => 0 / 0,
            37 => 0 / 0,










            6 => 0 / 0,

            5 => 0 / 0,

            22 => 0 / 0,




            34, 35 => 0 / 0,








            25 => 0 / 0,
            17, 21 => 0 / 0,

            24, 32 => 0 / 0,







            33 => 0 / 0,

            16 => 0 / 0,


            18 => 0 / 0,








            7 => 0 / 0,

            2 => 0 / 0,
            1, 20 => 0 / 0,
            10, 28 => 0 / 0,
            8, 12, 26 => 0 / 0,
            4, 9, 13 => 0 / 0,





            31 => 0 / 0,

            29 => 0 / 0,

            11 => 0 / 0,



            3, 19, 23 => 0 / 0,


            27 => 0 / 0,

            30 => 0 / 0,
          };
        } finally {
          f($i - 1);
        }
      }







      function g() {
        return __LINE__;
      }
      ]]>
    </codeblock>
    <p>
      "Catchline" と名付けた作品。実行するとトークン <code>#base64_decode('SGVsbG8sIFdvcmxkIQ==')</code> が得られる。
    </p>
    <p>
      トークンは PHP の式になっていて、評価すると <code>Hello, World!</code> という文字列になる。PHPer チャレンジのトークンには空白を含められないという制約があるが、こういった形でトークンにすれば回避できる。
    </p>
  </section>
  <section id="commentary">
    <h>解説</h>
    <section id="summary">
      <h>概要</h>
      <p>
        例外が発生した行数にデータをエンコードし、それを <code>catch</code> で捕まえて表示している。
      </p>
    </section>
    <section id="chain-of-exceptions">
      <h>例外オブジェクトの連鎖</h>
      <p>
        <a href="https://www.php.net/class.Exception"><code>Exception</code></a> や <a href="https://www.php.net/class.Error"><code>Error</code></a> には <code>$previous</code> というプロパティがあり、コンストラクタの第3引数から渡すことができる。主に 2つの用法がある:
      </p>
      <ul>
        <li>エラーを処理している途中に起こった別のエラーに、元のエラー情報を含める</li>
        <li>内部エラーをラップして作られたエラーに、内部エラーの情報を含める</li>
      </ul>
      <p>
        このうち 1つ目のケースは、 <code>finally</code> 節の中でエラーを投げると PHP 処理系が勝手に <code>$previous</code> を設定してくれる。
      </p>
      <codeblock language="php">
        <![CDATA[
        <?php

        try {
          try {
            throw new Exception("Error 1");
          } finally {
            throw new Exception("Error 2");
          }
        } catch (Exception $e) {
          echo $e->getMessage() . PHP_EOL;
          // => Error 2
          echo $e->getPrevious()->getMessage() . PHP_EOL;
          // => Error 1
        }
        ]]>
      </codeblock>
      <p>
        この知識を元に、トークンの出力部を解析してみる。
      </p>
    </section>
    <section id="output">
      <h>出力部の解析</h>
      <p>
        出力部をコメントや改行を追加して再掲する:
      </p>
      <codeblock language="php">
        <![CDATA[
        <?php
        try {
          f(g() / __LINE__);
        } catch (Throwable $e) {
          while ($e = $e->getPrevious()) {
            printf('%c', $e->getLine() + 23);
          }
          echo "\n";
        }
        ]]>
      </codeblock>
      <p>
        出力をおこなう <code>catch</code> 節を見てみると、 <code>Throwable::getPrevious()</code> を呼び出してエラーチェインを辿り、 <code>Throwable::getLine()</code> でエラーが発生した行数を取得している。その行数に <code>23</code> なるマジックナンバーを足し、フォーマット指定子 <code>%c</code> で出力している。
      </p>
      <p>
        フォーマット指定子 <code>%c</code> は、整数を ASCII コード<footnote>RAS syndrome</footnote> と見做して印字する。トークン <code>#base64_decode('SGVsbG8sIFdvcmxkIQ==')</code> の <code>b</code> であれば、ASCII コード <code>98</code> なので、75 行目で発生したエラー、
      </p>
      <codeblock language="php">
        <![CDATA[
        1, 20 => 0 / 0,
        ]]>
      </codeblock>
      <p>
        によって表現されている。エラーを起こす方法はいろいろと考えられるが、今回はゼロ除算を使った。
      </p>
      <p>
        それでは、エラーチェインを作る箇所、関数 <code>f()</code> を見ていく。
      </p>
    </section>
    <section id="data-construction">
      <h>データ構成部の解析</h>
      <p>
        <code>f()</code> の定義を再掲する (エラーオブジェクトの行数を利用しているので、一部分だけ抜き出すと値が変わることに注意):
      </p>
      <codeblock language="php">
        <![CDATA[
        function f(int $i) {
          if ($i < 0) f();
          try {
            match ($i) {
              0 => 0 / 0, // 12 行目



              15, 36 => 0 / 0,
              14 => 0 / 0,
              37 => 0 / 0,

              // (略)

              30 => 0 / 0, // 97 行目
            };
          } finally {
            f($i - 1);
          }
        }
        ]]>
      </codeblock>
      <p>
        前述のように、 <code>finally</code> 節でエラーを投げると PHP 処理系が <code>$previous</code> を設定する。ここでは、エラーを繋げるために <code>f()</code> を再帰呼び出ししている。最初に <code>f()</code> を呼び出している箇所を確認すると、
      </p>
      <codeblock language="php">
        <![CDATA[
        <?php
        try {
          f(g() / __LINE__); // 3 行目
        ]]>
      </codeblock>
      <codeblock language="php">
        <![CDATA[
        function g() {
          return __LINE__; // 111 行目
        }
        ]]>
      </codeblock>
      <p>
        <code>f()</code> には <code>111 / 3</code> で <code>37</code> が渡されることがわかる。そこから 1 ずつ減らして再帰呼び出ししていき、0 より小さくなったら <code>f()</code> を引数なしで呼び出す。引数の数が足りないと呼び出しに失敗するので、再帰はここで止まる。
      </p>
      <p>
        エラーチェインは、最後に発生したエラーを先頭とした単方向連結リストになっているので、順に
      </p>
      <ol numeration="arabic">
        <li><code>f()</code> の引数が足りないことによる呼び出し失敗</li>
        <li><code>f(0)</code> の呼び出しで発生したゼロ除算</li>
        <li><code>f(1)</code> の呼び出しで発生したゼロ除算</li>
        <li>…</li>
        <li><code>f(37)</code> の呼び出しで発生したゼロ除算</li>
      </ol>
      <p>
        となっている。出力の際は <code>catch</code> したエラーの <code>getPrevious()</code> から処理を始めるので、1 番目の <code>f()</code> によるエラーは無視され、 <code>f(0)</code> によるエラー、 <code>f(1)</code> によるエラー、 <code>f(2)</code> によるエラー、と出力が進む。
      </p>
      <p>
        <code>f()</code> に <code>0</code> を渡したときは 12 行目にある <code>match</code> の <code>0</code> でゼロ除算が起こるので、行数が 12 となったエラーが投げられる。出力部ではこれに 23 を足した数を ASCII コードとして表示しているのだった。 <code>12 + 23</code> は <code>35</code>、ASCII コードでは <code>#</code> である。これがトークンの 1文字目にあたる。
      </p>
    </section>
  </section>
  <section id="outro">
    <h>おわりに</h>
    <p>
      「行数」というのはトークン文字列をデコードする対象として優れている。
    </p>
    <ul>
      <li>トークンの一部や全部が陽に現れない</li>
      <li><code>__LINE__</code> で容易に取得できる</li>
    </ul>
    <p>
      しかし、こういった「変な」プログラムを何度も読んだり書いたりしていると、 <code>__LINE__</code> を使うのはあまりにありきたりで退屈になる。では、他に行数を取得する手段はないか。こうして <code>Throwable</code> を思いつき、続けてエラーオブジェクトには <code>$previous</code> があることを思い出した。
    </p>
    <p>
      今回エラーを投げるのにゼロ除算を用いたのは、それがエラーを投げる最も短いコードだと考えたからである。もし 3バイト未満で <code>Throwable</code> なオブジェクトを投げる手段をご存じのかたがいらっしゃれば、ぜひご教示いただきたい。……と締める予定だったのだが、<code>0/0</code> のところを存在しない定数にすれば、簡単に 1バイトを達成できた。ゼロ除算している箇所はちょうど 26 箇所あるので、アルファベットにでもしておけば意味ありげで良かったかもしれない。
    </p>
  </section>
</article>
