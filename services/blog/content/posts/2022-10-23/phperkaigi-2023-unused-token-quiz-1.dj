---
[article]
uuid = "46e0d5db-b17e-464c-a723-8c3e01af7d1d"
title = "PHPerKaigi 2023: ボツになったトークン問題 その 1"
description = "来年の PHPerKaigi 2023 でデジタルサーカス株式会社から出題予定のトークン問題のうち、ボツになった問題を公開する (その 1)。"
tags = [
  "php",
  "phperkaigi",
]

[[article.revisions]]
date = "2022-10-23"
remark = "公開"
---
{#intro}
# はじめに

2023 年 3 月 23 日から 25 日にかけて開催予定 (記事執筆時点) の、
[PHPerKaigi 2023](https://phperkaigi.jp/2023/) において、
昨年と同様に、弊社 [デジタルサーカス株式会社](https://www.dgcircus.com/) から、
トークン問題を出題予定である。

昨年のトークン問題の記事はこちら: [PHPerKaigi 2022 トークン問題の解説](/posts/2022-04-09/phperkaigi-2022-tokens)

すでに 2023 年用の問題は作成済みであるが、その制作過程の中でいくつかボツ問ができた。
せっかくなので、PHPerKaigi 開催を待つ間に紹介しようと思う。

10 月から 2 月まで、毎月 1 記事ずつ公開していく予定 (忘れていなければ)。

{#quiz}
# 問題

注意: これはボツ問なので、得られたトークンを PHPerKaigi で入力してもポイントにはならない。

```php
<?php

$π = $argv[1] ?? null;
if ($π === null) {
  exit('No input.');
}
$π = trim($π);
if (!is_numeric($π)) {
  exit('Invalid input.');
}

$s = implode(array_map(chr(...), str_split($π, 2)));

preg_match('/(\x23.+?) /', $s, $m);
$t = $m[1] ?? '';

if (md5($t) === '056e831a4146bf123e8ea16613303d2e') {
  echo "Token: {$t}\n";
} else {
  echo "Failed.\n";
}
```

{#how-to-obtain-token}
# トークン入手方法

ソースを見るとわかるとおり、`$argv[1]` を参照している。
それを `$π` なる変数に代入しているので、円周率を渡してみる。

```shell-session
$ php Q.php 3.14
Failed.
```

失敗してしまった。精度を上げてみる。

```shell-session
$ php Q.php 3.1415
Failed.
```

だめだった。これを成功するまで繰り返す。

最初にトークンが得られるのは、小数点以下 16 桁目まで入力したときで、こうなる。

```shell-session
$ php Q.php 3.1415926535897932
Token: #YO
```

めでたくトークン「`#YO`」が手に入った。

{#commentary}
# 解説

短いので頭から追っていく。

```php
$π = $argv[1] ?? null;
if ($π === null) {
  exit('No input.');
}
$π = trim($π);
if (!is_numeric($π)) {
  exit('Invalid input.');
}
```

入力のバリデーション部分。数値のみ受け付ける。

```php
$s = implode(array_map(chr(...), str_split($π, 2)));
```

`$π` を 2 文字ごとに区切り (`str_split`)、
数値を ASCII コードと見做して文字に変換 (`chr`) して結合 (`implode`) している。

例えば、`$π` が `'656667'` だったとすると、
`65`、`66`、`67` に対応した
`'A'`、`'B'`、`'C'` へと変換され、`'ABC'` になる。

```php
$π = '656667';
$s = implode(array_map(chr(...), str_split($π, 2)));
echo $s;
// => ABC
```

```php
preg_match('/(\x23.+?) /', $s, $m);
$t = $m[1] ?? '';
```

正規表現でマッチングしている。`\x23` は `#` と同じであることに留意すると、
この正規表現は「`#` から始まる 2 以上の長さ (含 `#`) の文字列で、
最初に現れるスペースまで」にマッチする。つまりこれは、PHPerKaigi におけるトークンである。

なお、`#` を直接書いていないのは、`/#.+?) /` と書くと、
`#.+?)` という意図せぬトークンが登録されてしまうからである。

```php
if (md5($t) === '056e831a4146bf123e8ea16613303d2e') {
  echo "Token: {$t}\n";
} else {
  echo "Failed.\n";
}
```

最後にトークンのハッシュ値を見て、想定解かどうかを確認する。

{#outro}
# おわりに

円周率を何桁も計算して ASCII コード経由で文字列化すれば、トークンっぽいものがどこかで出てくるのではないか、と考えて生まれた作品。

最初は真面目に円周率の計算プログラムを組んでいたのだが、いざ動かしてみるとやけに浅いところにあったので驚いた
(ちなみに、それでも `M_PI` や `pi()` では精度が足りない)。
見つけたときは狂喜したものの、冷静になってみると大して面白くなかったのでボツになった。
むしろ、100 万桁目くらいに埋まっていてくれたほうがよかったかもしれない。
